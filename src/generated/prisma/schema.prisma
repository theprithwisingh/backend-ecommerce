// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders  Order[]
  reviews Review[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  reviews    Review[]
  orderItems OrderItem[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int      @default(1)
  comment   String
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Order {
  id        Int         @id @default(autoincrement())
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  orderItems OrderItem[]
  payment    Payment?
  shipping   Shipping?
}

model OrderItem {
  id       Int   @id @default(autoincrement())
  quantity Int
  price    Float

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Payment {
  id       Int      @id @default(autoincrement())
  provider String // e.g., Stripe, PayPal
  status   String // e.g., succeeded, failed
  amount   Float
  paidAt   DateTime

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int   @unique
}

model Shipping {
  id         Int       @id @default(autoincrement())
  address    String
  city       String
  postalCode String
  country    String
  shippedAt  DateTime?

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int   @unique
}

enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
